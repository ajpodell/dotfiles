" Vundle configuration file.
" Add all plugins here and associated plugin configurations

" :PluginInstall after adding a new
" :PluginClean after deleting

set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
filetype plugin indent on    " required

call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


" some jsx stuff - gotta look into this one - but should do jsx indenting
" Plug 'yuezk/vim-js'
" Plug 'maxmellon/vim-jsx-pretty'}


" All Plugins

" adam recs
" linter
Plugin 'dense-analysis/ale' 

map <leader>ad :ALEDisableBuffer<cr>
map <leader>ae :ALEEnableBuffer<cr>
map <leader>an :ALENextWrap<cr>
map <leader>ap :ALEPreviousWrap<cr>
nmap <leader>af <Plug>(ale_fix)
" probably want some form of pylint, but its being annoying right now
let g:ale_linters = {
\   'javascript': ['flow', 'eslint', 'prettier'],
\   'python': ['pylint']
\}

", 'importjs'],
" \   'python': ['autopep8', 'isort'],
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\   'python': ['black'],
\   'css': ['prettier', 'stylelint']
\}
let g:ale_echo_msg_format = '%linter% says: %s'
" try to get pylint working with global
" let g:ale_python_pylint_options = '--rcfile pylintrc'
" let g:ale_python_pylint_options = '--rcfile ~/data/pylintrc'
let g:ale_python_auto_virtualenv=1
let g:ale_python_pylint_use_global=1
" idk if i want this yet
" let g:ale_fix_on_save = 1

""'autopep8' - Fix PEP8 issues with autopep8.
""'black' - Fix PEP8 issues with black.
""'isort' - Sort Python imports with isort.
""'reorder-python-imports' - Sort Python imports with reorder-python-imports.
""'yapf' - Fix Python files with yapf.

" possible linters for later
" "'eslint' - Apply eslint --fix to a file.
" "'fecs' - Apply fecs format to a file.
" "'importjs' - automatic imports for javascript
" "'prettier' - Apply prettier to a file.
" "'prettier_eslint', 'prettier-eslint' - Apply prettier-eslint to a file.
" "'prettier_standard', 'prettier-standard' - Apply prettier-standard to a file.
" "'standard' - Fix JavaScript files using standard --fix
" "'xo' - Fix JavaScript/TypeScript files using xo --fix.
" "
" "Try the following generic fixers:
" "
" "'remove_trailing_lines' - Remove all blank lines at the end of a file.
" "'trim_whitespace' - Remove all trailing whitespace characters at the end of every line.

" worp - project ale is under

" tmux window
" Plugin 'benmills/vimux'  " had issues
" Plugin 'jgdavey/tslime'  " had issues
Plugin 'esamattis/slimux'  " send command to tmux window"
" test running -- now vim-test/vim-test
Plugin 'janko-m/vim-test' 
let test#javascript#jest#executable = 'npm test'
let test#python#runner = 'pytest'
let test#python#pytest#executable = 'pytest -s'
" make test commands execute using dispatch.vim
" slimux"
" let test#strategy = "neovim" 
let test#strategy = "slimux" 
let test#python#file_pattern = '*_test.py'
"let g:test#javascript#runner = 'NODE_PATH=$(pwd) NODE_ENV=testing jest'
map <Leader>tt <CR> :TestNearest <CR>
map <Leader>tf <CR> :TestFile <CR>



" what does this do? 
" Plugin 'tmhedberg/SimpylFold'

" ide esque stuff i havent set up
" Plugin 'vim-syntastic/syntastic'
" Plugin 'valloric/youcompleteme'

" Plugin 'nvie/vim-flake8'


" ##### surrounds ##### "
Plugin 'tpope/vim-surround'

" DelimitMate
" I think its time to move on from this and go to vim surround
" Plugin 'Raimondi/delimitMate'
" let delimitMate_expand_cr = 1
" let delimitMate_expand_space = 1

" ##### end surrounds ##### "

" Plugin 'craigemery/vim-autotag'

" Plugin 'jnurmine/Zenburn' " this is a colorscheme to check out later

Plugin 'preservim/nerdtree'
" nnoremap <Leader>e :NERDTree<cr>

" Plugin 'jistr/vim-nerdtree-tabs' " still need to learn this. This isnt supported anymore

" this is giving an issue since vim is using python3.6 and this needs 3.7
" Plugin 'jmcantrell/vim-virtualenv'

" Fuzzy Finding - FZF
" there is the default fzf plugin, and then some niceties in fzf.vim as a separate plugin
" https://github.com/junegunn/fzf/blob/master/README-VIM.md
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
set rtp+=/usr/local/opt/fzf
"noremap <Leader>f :FZF $DATA_REPO --sink=e<cr> " moved this to .vim.plugin

function! FastFzf()
    " TODO: if not in a git root, just use current dir (maybe that belongs in
    " GitRoot?
    let l:git_root = GitRoot()
    echo l:git_root
    call fzf#run({'source': 'fd . ' . l:git_root . ' --type f --hidden -E .git', 'sink': 'e'})  " my edits
endfunc

" noremap <Leader>f :call fzf#run({'source': 'fd . $DATA_REPO --type f --hidden -E .git', 'sink': 'e'})<CR>
noremap <Leader>f :call FastFzf()<CR>
nnoremap <Leader>b :Buffers<CR>

" initialize fzf config and set some defaults
let g:fzf_vim = {}
let g:fzf_vim.buffers_jump = 1


""""""" END FZF """"""""""""'"

" better autocomplete and function defs
Plugin 'davidhalter/jedi-vim'
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#popup_on_dot = 0  " maybe if i get more used to it, consider enabling this
"let g:jedi#usages_command = "<leader>n"  " idk why this isn working
autocmd FileType python setlocal completeopt-=preview  " dont show the docstring preview

" TOLOOK AT
" supertab
" deoplete-plugins/deoplete-jedi


"git blame and another git fun i havent learned yet
Plugin 'tpope/vim-fugitive' 

" status bar stuff
"Plugin 'vim-airline/vim-airline'
" Just show the filename (no path) in the tab
"let g:airline#extensions#tabline#fnamemod = ':t'


" syntax highlighting for thrift
Bundle 'solarnz/thrift.vim'
au BufNewFile,BufRead *.thrift setlocal filetype=thrift " this should be in the package, but isnt working"


"nerdtree
"let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" in your plugin constants configuration section
let g:virtualenv_auto_activate = 1

" Bins mapping for file switching. 
Plugin 'shenbin04/vim-related'



" ----- YouCompleteMe ----- "
"let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
"let g:ycm_show_diagnostics_ui = 1
"let g:ycm_max_diagnostics_to_display = 1000
"let g:ycm_always_populate_location_list = 1
"let g:ycm_autoclose_preview_window_after_completion = 1

" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/ycm_extra_conf.py'
"let g:ycm_auto_trigger = 1
"let g:ycm_semantic_triggers =  {
"  \   'c' : ['->', '.'],
"  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
"  \             're!\[.*\]\s'],
"  \   'ocaml' : ['.', '#'],
"  \   'cpp,objcpp' : ['->', '.', '::'],
"  \   'perl' : ['->'],
"  \   'php' : ['->', '::'],
"  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
"  \   'ruby' : ['.', '::'],
"  \   'lua' : ['.', ':'],
"  \   'erlang' : [':'],
"  \ }
"let g:ycm_path_to_python_interpreter="/opt/bb/bin/python"
"Only enable ycm for certain types of file
"let g:ycm_filetype_whitelist = { 'cpp': 1, 'c': 1, 'python': 1}

"diagmode of ycm
"nnoremap <F3> <Esc> :YcmDiags<CR>
"nnoremap <F2> :YcmCompleter FixIt<CR>
"nnoremap <F7> :YcmCompleter GoToDefinition<CR>
"nnoremap <F8> :YcmCompleter GoToDeclaration<CR>

" ------CurineIncSw -----"
"CurtineIncSw()<CR>

" ------ Syntastic ----- "
"let g:syntastic_cpp_compiler_options='
" \ -I/bb/build/Linux-x86_64-32/release/robolibs/prod/lib/dpkgroot/opt/bb/include
" \ -I/bb/build/Linux-x86_64-32/release/robolibs/prod/lib/dpkgroot/opt/bb/include/stlport
" \'

" All of your Plugins must be added before the following line
call vundle#end()            " required

" vim: ft=vim
